openapi: 3.0.0
info:
  title: Dainagon
  description: Server Side Api
  version: 1.0.0

paths:
  /question:
    get:
      summary: Get questions list
      responses:
        "200":
          description: Response JSON
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QuestionHeader"
              example:
                - questionID: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  title: Hello World
                - questionID: 2ca83d64-5532-3542-ff24-1d462a22dac4
                  title: Add

  /question/{questionID}:
    get:
      summary: Get Question
      parameters:
        - in: path
          name: questionID
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Response Json
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
              example:
                questionID: 2ca83d64-5532-3542-ff24-1d462a22dac4
                title: Add
                description: Let's add two values together
                TestCases:
                  - input: 1,2
                    expected: 3
                  - input: 0,0
                    expected: 0
                  - input: 0,5
                    expected: 5
                  - input: 1.1,1.2
                    expected: 2.3
                  - input: 1.5,2.5
                    expected: 4.0
                Assertions:
                  - assertion: "'+' in code"
                    message: 加算が行われていない可能性があります
                  - assertion: "'return' in code"
                    message: 関数から値が返されていない可能性があります

  /answer:
    post:
      summary: Post user's answer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAnswer"
      responses:
        "201":
          description: Created

components:
  schemas:
    QuestionHeader:
      type: object
      properties:
        questionID:
          type: string
          format: uuid
        title:
          type: string
      required:
        - questionID
        - title

    Question:
      type: object
      properties:
        questionID:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        TestCases:
          type: array
          items:
            $ref: "#/components/schemas/TestCase"
        Assertions:
          type: array
          items:
            $ref: "#/components/schemas/Assertion"
      required:
        - questionID
        - title
        - description
        - TestCases
        - Assertions

    TestCase:
      type: object
      properties:
        input:
          type: string
        expected:
          type: string
      required:
        - input
        - expected

    Assertion:
      type: object
      properties:
        assertion:
          type: string
        message:
          type: string
      required:
        - assertion
        - message

    UserAnswer:
      type: object
      properties:
        userID:
          type: string
          format: uuid
        questionID:
          type: string
          format: uuid
        isCorrect:
          type: boolean
      required:
        - userID
        - questionID
        - isCorrect
